TI ARM Assembler PC v5.2.2 Thu Mar 10 16:27:07 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
H:/EECS_690/TI_ARM_Tiva_Projects_EECS_690_Sp16/Source/portable/CCS/ARM_CM4F/portasm.asm PAGE    1

       1                    ;/*
       2                    ;    FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
       3                    ;    All rights reserved
       4                    ;
       5                    ;    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
       6                    ;
       7                    ;    This file is part of the FreeRTOS distribution.
       8                    ;
       9                    ;    FreeRTOS is free software; you can redistribute it and/or modify it under
      10                    ;    the terms of the GNU General Public License (version 2) as published by the
      11                    ;    Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
      12                    ;
      13                    ;    ***************************************************************************
      14                    ;    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
      15                    ;    >>!   distribute a combined work that includes FreeRTOS without being   !<<
      16                    ;    >>!   obliged to provide the source code for proprietary components     !<<
      17                    ;    >>!   outside of the FreeRTOS kernel.                                   !<<
      18                    ;    ***************************************************************************
      19                    ;
      20                    ;    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
      21                    ;    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
      22                    ;    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
      23                    ;    link: http://www.freertos.org/a00114.html
      24                    ;
      25                    ;    ***************************************************************************
      26                    ;     *                                                                       *
      27                    ;     *    FreeRTOS provides completely free yet professionally developed,    *
      28                    ;     *    robust, strictly quality controlled, supported, and cross          *
      29                    ;     *    platform software that is more than just the market leader, it     *
      30                    ;     *    is the industry's de facto standard.                               *
      31                    ;     *                                                                       *
      32                    ;     *    Help yourself get started quickly while simultaneously helping     *
      33                    ;     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
      34                    ;     *    tutorial book, reference manual, or both:                          *
      35                    ;     *    http://www.FreeRTOS.org/Documentation                              *
      36                    ;     *                                                                       *
      37                    ;    ***************************************************************************
      38                    ;
      39                    ;    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
      40                    ;    the FAQ page "My application does not run, what could be wrong?".  Have you
      41                    ;    defined configASSERT()?
      42                    ;
      43                    ;    http://www.FreeRTOS.org/support - In return for receiving this top quality
      44                    ;    embedded software for free we request you assist our global community by
      45                    ;    participating in the support forum.
      46                    ;
      47                    ;    http://www.FreeRTOS.org/training - Investing in training allows your team to
      48                    ;    be as productive as possible as early as possible.  Now you can receive
      49                    ;    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
      50                    ;    Ltd, and the world's leading authority on the world's leading RTOS.
      51                    ;
      52                    ;    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
      53                    ;    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
      54                    ;    compatible FAT file system, and our tiny thread aware UDP/IP stack.
      55                    ;
TI ARM Assembler PC v5.2.2 Thu Mar 10 16:27:07 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
H:/EECS_690/TI_ARM_Tiva_Projects_EECS_690_Sp16/Source/portable/CCS/ARM_CM4F/portasm.asm PAGE    2

      56                    ;    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
      57                    ;    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
      58                    ;
      59                    ;    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
      60                    ;    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
      61                    ;    licenses offer ticketed support, indemnification and commercial middleware.
      62                    ;
      63                    ;    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
      64                    ;    engineered and independently SIL3 certified version for use in safety and
      65                    ;    mission critical applications that require provable dependability.
      66                    ;
      67                    ;    1 tab == 4 spaces!
      68                    ;*/
      69                    
      70 00000000                   .thumb
      71                    
      72                            .ref pxCurrentTCB
      73                            .ref vTaskSwitchContext
      74                            .ref ulMaxSyscallInterruptPriority
      75                    
      76                            .def xPortPendSVHandler
      77                            .def ulPortGetIPSR
      78                            .def vPortSVCHandler
      79                            .def vPortStartFirstTask
      80                            .def vPortEnableVFP
      81                    
      82 00000000 E000ED08  NVICOffsetConst:                                        .word   0xE000ED08
      83 00000004 E000ED88  CPACRConst:                                                     .word   0xE000ED88
      84 00000008 00000000! pxCurrentTCBConst:                                      .word   pxCurrentTCB
      85 0000000c 00000000! ulMaxSyscallInterruptPriorityConst: .word ulMaxSyscallInterruptPriority
      86                    
      87                    ; -----------------------------------------------------------
      88                    
      89                            .align 4
      90                    ulPortGetIPSR: .asmfunc
      91 00000010 8005F3EF          mrs r0, ipsr ; [KEEP 32-BIT INS]
      92 00000014 4770              bx r14 ; [ORIG 16-BIT INS]
      93                            .endasmfunc
      94                     ; -----------------------------------------------------------
      95                    
      96                            .align 4
      97                    vPortSetInterruptMask: .asmfunc
      98 00000018 B401              push {r0} ; [ORIG 16-BIT INS]
      99 0000001a 0010F85F          ldr r0, ulMaxSyscallInterruptPriorityConst ; [KEEP 32-BIT INS]
     100 0000001e 8811F380          msr basepri, r0 ; [KEEP 32-BIT INS]
     101 00000022 BC01              pop {r0} ; [ORIG 16-BIT INS]
     102 00000024 4770              bx r14 ; [ORIG 16-BIT INS]
     103                            .endasmfunc
     104                    ; -----------------------------------------------------------
     105                    
     106                            .align 4
     107                    xPortPendSVHandler: .asmfunc
     108 00000028 8009F3EF          mrs r0, psp ; [KEEP 32-BIT INS]
     109 0000002c 8F6FF3BF          isb ; [KEEP 32-BIT INS]
     110                    
TI ARM Assembler PC v5.2.2 Thu Mar 10 16:27:07 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
H:/EECS_690/TI_ARM_Tiva_Projects_EECS_690_Sp16/Source/portable/CCS/ARM_CM4F/portasm.asm PAGE    3

     111                            ;/* Get the location of the current TCB. */
     112 00000030 302CF85F          ldr     r3, pxCurrentTCBConst ; [KEEP 32-BIT INS]
     113 00000034 681A              ldr     r2, [r3] ; [ORIG 16-BIT INS]
     114                    
     115                            ;/* Is the task using the FPU context?  If so, push high vfp registers. */
     116 00000036 0F10F01E          tst r14, #0x10 ; [KEEP 32-BIT INS]
     117 0000003a BF08              it eq ; [ORIG 16-BIT INS]
     118 0000003c 8A10ED20          vstmdbeq r0!, {s16-s31} ; [KEEP 32-BIT INS]
     119                    
     120                            ;/* Save the core registers. */
     121 00000040 4FF0E920          stmdb r0!, {r4-r11, r14} ; [KEEP 32-BIT INS]
     122                    
     123                            ;/* Save the new top of stack into the first member of the TCB. */
     124 00000044 6010              str r0, [r2] ; [ORIG 16-BIT INS]
     125                    
     126 00000046 3D04F84D          stmdb sp!, {r3} ; [KEEP 32-BIT INS]
     127 0000004a 0040F85F          ldr r0, ulMaxSyscallInterruptPriorityConst ; [KEEP 32-BIT INS]
     128 0000004e 6801              ldr r1, [r0] ; [ORIG 16-BIT INS]
     129 00000050 8811F381          msr basepri, r1 ; [KEEP 32-BIT INS]
     130 00000054 8F4FF3BF          dsb ; [KEEP 32-BIT INS]
     131 00000058 8F6FF3BF          isb ; [KEEP 32-BIT INS]
     132 0000005c FFFEF7FF!         bl vTaskSwitchContext ; [KEEP 32-BIT INS]
     133 00000060 0000F04F          mov r0, #0 ; [KEEP 32-BIT INS]
     134 00000064 8811F380          msr basepri, r0 ; [KEEP 32-BIT INS]
     135 00000068 3B04F85D          ldmia sp!, {r3} ; [KEEP 32-BIT INS]
     136                    
     137                            ;/* The first item in pxCurrentTCB is the task top of stack. */
     138 0000006c 6819              ldr r1, [r3] ; [ORIG 16-BIT INS]
     139 0000006e 6808              ldr r0, [r1] ; [ORIG 16-BIT INS]
     140                    
     141                            ;/* Pop the core registers. */
     142 00000070 4FF0E8B0          ldmia r0!, {r4-r11, r14} ; [KEEP 32-BIT INS]
     143                    
     144                            ;/* Is the task using the FPU context?  If so, pop the high vfp registers
     145                            ;too. */
     146 00000074 0F10F01E          tst r14, #0x10 ; [KEEP 32-BIT INS]
     147 00000078 BF08              it eq ; [ORIG 16-BIT INS]
     148 0000007a 8A10ECB0          vldmiaeq r0!, {s16-s31} ; [KEEP 32-BIT INS]
     149                    
     150 0000007e 8809F380          msr psp, r0 ; [KEEP 32-BIT INS]
     151 00000082 8F6FF3BF          isb ; [KEEP 32-BIT INS]
     152 00000086 4770              bx r14 ; [ORIG 16-BIT INS]
     153                            .endasmfunc
     154                    
     155                    ; -----------------------------------------------------------
     156                    
     157                            .align 4
     158                    vPortSVCHandler: .asmfunc
     159                            ;/* Get the location of the current TCB. */
     160 00000088 3084F85F          ldr     r3, pxCurrentTCBConst ; [KEEP 32-BIT INS]
     161 0000008c 6819              ldr r1, [r3] ; [ORIG 16-BIT INS]
     162 0000008e 6808              ldr r0, [r1] ; [ORIG 16-BIT INS]
     163                            ;/* Pop the core registers. */
     164 00000090 4FF0E8B0          ldmia r0!, {r4-r11, r14} ; [KEEP 32-BIT INS]
     165 00000094 8809F380          msr psp, r0 ; [KEEP 32-BIT INS]
TI ARM Assembler PC v5.2.2 Thu Mar 10 16:27:07 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
H:/EECS_690/TI_ARM_Tiva_Projects_EECS_690_Sp16/Source/portable/CCS/ARM_CM4F/portasm.asm PAGE    4

     166 00000098 8F6FF3BF          isb ; [KEEP 32-BIT INS]
     167 0000009c 0000F04F          mov r0, #0 ; [KEEP 32-BIT INS]
     168 000000a0 8811F380          msr     basepri, r0 ; [KEEP 32-BIT INS]
     169 000000a4 4770              bx r14 ; [ORIG 16-BIT INS]
     170                            .endasmfunc
     171                    
     172                    ; -----------------------------------------------------------
     173                    
     174                            .align 4
     175                    vPortStartFirstTask: .asmfunc
     176                            ;/* Use the NVIC offset register to locate the stack. */
     177 000000a8 00ACF85F          ldr r0, NVICOffsetConst ; [KEEP 32-BIT INS]
     178 000000ac 6800              ldr r0, [r0] ; [ORIG 16-BIT INS]
     179 000000ae 6800              ldr r0, [r0] ; [ORIG 16-BIT INS]
     180                            ;/* Set the msp back to the start of the stack. */
     181 000000b0 8808F380          msr msp, r0 ; [KEEP 32-BIT INS]
     182                            ;/* Call SVC to start the first task. */
     183 000000b4 B662              cpsie i ; [ORIG 16-BIT INS]
     184 000000b6 B661              cpsie f ; [ORIG 16-BIT INS]
     185 000000b8 8F4FF3BF          dsb ; [KEEP 32-BIT INS]
     186 000000bc 8F6FF3BF          isb ; [KEEP 32-BIT INS]
     187 000000c0 DF00              svc #0 ; [ORIG 16-BIT INS]
     188                            .endasmfunc
     189                    
     190                    ; -----------------------------------------------------------
     191                    
     192                            .align 4
     193                    vPortEnableVFP: .asmfunc
     194                            ;/* The FPU enable bits are in the CPACR. */
     195 000000c4 00C4F85F          ldr.w r0, CPACRConst ; [KEEP 32-BIT INS]
     196 000000c8 6801              ldr     r1, [r0] ; [ORIG 16-BIT INS]
     197                    
     198                            ;/* Enable CP10 and CP11 coprocessors, then save back. */
     199 000000ca 0170F441          orr     r1, r1, #( 0xf << 20 ) ; [KEEP 32-BIT INS]
     200 000000ce 6001              str r1, [r0] ; [ORIG 16-BIT INS]
     201 000000d0 4770              bx      r14 ; [ORIG 16-BIT INS]
     202                            .endasmfunc
     203                    
     204                            .end

--------------------------
Thumb2 Statistics
--------------------------
Number of Thumb2 ins converted to Thumb = 0 (0%)
Number of Thumb ins in input = 28 (44%)
Number of Thumb2 ins encoded as Thumb2 = 35 (100%)
Number of Thumb2 ins converted to 2 OPND Thumb = 0


No Assembly Errors, No Assembly Warnings
